{"version":3,"sources":["components/Table/index.jsx","components/Container/index.jsx","components/Navbar/index.jsx","components/Search/index.jsx","components/Grid/index.js","pages/home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","tableCell","fontWeight","table","minWidth","maxWidth","SimpleTable","props","classes","TableContainer","className","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","employees","map","employee","key","name","scope","role","age","gender","SimpleContainer","Fragment","CssBaseline","Container","theme","root","flexGrow","marginBottom","spacing","menuButton","marginRight","title","ButtonAppBar","AppBar","position","Toolbar","Typography","variant","SearchBar","noValidate","autoComplete","onSubmit","handleFormSubmit","TextField","id","placeholder","value","search","onChange","handleChange","fullWidth","margin","InputLabelProps","shrink","paper","padding","textAlign","color","palette","text","secondary","CenteredGrid","Grid","container","justify","item","xs","Button","onClick","sortByName","sortByRole","resetEmployees","Home","state","Employees","sort","a","b","nameA","toLowerCase","nameB","setState","roleA","roleB","event","target","employeeSearch","filter","includes","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0904ea73.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  tableCell: {\r\n    fontWeight: \"bold\",\r\n  },\r\n  table: {\r\n    minWidth: 300,\r\n    maxWidth: 1080,\r\n  },\r\n});\r\n\r\nexport default function SimpleTable(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    // create table container \r\n    <TableContainer className={classes.table} component={Paper}>\r\n      {/*create table */}\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        {/* create table header */}\r\n        <TableHead>\r\n          {/* create a row inside the table header with cells for each column acting as labels */}\r\n          <TableRow>\r\n            <TableCell className={classes.tableCell} >Name</TableCell>\r\n            <TableCell className={classes.tableCell} align=\"right\">Role</TableCell>\r\n            <TableCell className={classes.tableCell} align=\"right\">Age</TableCell>\r\n            <TableCell className={classes.tableCell} align=\"right\">Gender</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        {/* create a body for the table data */}\r\n        <TableBody>\r\n          {/* for each row in the data create a row using a row component and then creating a cell for each property of the data */}\r\n          {props.employees.map((employee) => (\r\n            <TableRow key={employee.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {employee.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{employee.role}</TableCell>\r\n              <TableCell align=\"right\">{employee.age}</TableCell>\r\n              <TableCell align=\"right\">{employee.gender}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nexport default function SimpleContainer(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"sm\" {...props}/>\r\n    </React.Fragment>\r\n  );\r\n} ","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SimpleContainer from '../Container';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginBottom: theme.spacing(5),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <SimpleContainer>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Employee Directory\r\n          </Typography>\r\n          </SimpleContainer>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default function SearchBar(props) {\r\n  return (\r\n    <form noValidate autoComplete=\"off\" onSubmit={props.handleFormSubmit}>\r\n      <TextField\r\n          id=\"searchField\"\r\n          placeholder=\"Search Employees\"\r\n          value={props.search}\r\n          onChange={props.handleChange} \r\n          fullWidth\r\n          margin=\"normal\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        />\r\n    </form>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default function CenteredGrid(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid justify=\"center\"  item xs={6}>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={props.sortByName}>Sort By Name alphabetically</Button>\r\n        </Grid>\r\n        <Grid justify=\"center\"  item xs={6}>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={props.sortByRole}>Sort By Role alphabetically</Button>\r\n        </Grid>\r\n        <Grid justify=\"center\"  item xs={12}>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={props.resetEmployees}>Reset Employees</Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport SimpleTable from '../components/Table';\r\nimport SimpleContainer from '../components/Container';\r\nimport ButtonAppBar from '../components/Navbar';\r\nimport SearchBar from '../components/Search';\r\nimport Employees from '../employees.json';\r\nimport CenteredGrid from '../components/Grid';\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    employees: Employees,\r\n    search:\"\",\r\n  };\r\n\r\n  sortByName = () => {\r\n    const sortByName = this.state.employees.sort(function(a, b){\r\n      var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()\r\n      //sort string ascending\r\n      if (nameA < nameB)\r\n          return -1 \r\n      if (nameA > nameB)\r\n          return 1\r\n      return  0//default return value (no sorting)\r\n    })\r\n    this.setState(sortByName);\r\n  };\r\n\r\n  sortByRole = () => {\r\n    const sortByRole = this.state.employees.sort(function(a, b){\r\n      var roleA=a.role.toLowerCase(), roleB=b.role.toLowerCase()\r\n      //sort string ascending\r\n      if (roleA < roleB)\r\n          return -1 \r\n      if (roleA > roleB)\r\n          return 1\r\n      return  0//default return value (no sorting)\r\n    })\r\n    this.setState(sortByRole);\r\n  };\r\n  \r\n  resetEmployees = () => {\r\n    this.setState({employees: Employees});\r\n    this.setState({search:\"\"})\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({search: event.target.value});\r\n    const employeeSearch = this.state.employees.filter(employee => employee.name.includes(this.state.search)|| employee.role.includes(this.state.search) )\r\n    this.setState({employees: employeeSearch})\r\n    // resets employee table if user clears out search with backspace. \r\n    if (event.target.value === '') {\r\n      this.setState({employees: Employees})\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ButtonAppBar/>\r\n        <SimpleContainer>\r\n          <SearchBar handleChange={this.handleChange} search={this.state.search}/>\r\n          <CenteredGrid sortByName={this.sortByName} sortByRole={this.sortByRole} resetEmployees={this.resetEmployees}/>\r\n          <SimpleTable employees={this.state.employees}/>\r\n        </SimpleContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Home from './pages/home';\r\n \r\nfunction App() {\r\n  return (\r\n    <Home/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}